services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: ${PROJECT_NAME:-mono-class-platform}-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TZ: ${TZ:-Asia/Seoul}
      PGTZ: ${TZ:-Asia/Seoul}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"  # Expose for local development
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # FastAPI Backend
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: ${PROJECT_NAME:-mono-class-platform}-backend
    restart: unless-stopped
    environment:
      # Database
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      
      # App config
      PROJECT_NAME: ${PROJECT_NAME}
      PUBLIC_DOMAIN: ${PUBLIC_DOMAIN}
      TZ: ${TZ:-Asia/Seoul}
      
      # Backend settings
      BACKEND_PORT: ${BACKEND_PORT:-8000}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      UVICORN_ACCESS_LOG: ${UVICORN_ACCESS_LOG:-true}
      DEBUG_MODE: ${DEBUG_MODE:-false}
      ENABLE_ECHO_ENDPOINT: ${ENABLE_ECHO_ENDPOINT:-false}
      
      # Build info
      BUILD_VERSION: ${BUILD_VERSION:-v0.1.0-dev}
      BUILD_TS: ${BUILD_TS}
    volumes:
      - ../backend:/app:ro  # Read-only for security
    ports:
      - "8000:8000"  # Expose for development
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Proxy
  proxy:
    image: nginx:1.25-alpine
    container_name: ${PROJECT_NAME:-mono-class-platform}-proxy
    restart: unless-stopped
    environment:
      TZ: ${TZ:-Asia/Seoul}
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/mime.types:/etc/nginx/mime.types:ro
      - ../frontend/public:/usr/share/nginx/html:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "${PROXY_HTTP_PORT:-80}:80"
    networks:
      - app-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Redis (Optional - for future use)
  redis:
    image: redis:7-alpine
    container_name: ${PROJECT_NAME:-mono-class-platform}-redis
    restart: unless-stopped
    environment:
      TZ: ${TZ:-Asia/Seoul}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"  # Expose for development
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    profiles:
      - with-redis  # Optional service

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  app-network:
    driver: bridge
    name: ${PROJECT_NAME:-mono-class-platform}-network